
services:
  #cosmos:
  #  image: mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator:latest
  #  container_name: cosmosdb-emulator
  #  ports:
  #    - "8081:8081"  
  #    - "10251:10250"
  #  environment:
  #    - AZURE_COSMOS_EMULATOR_PARTITION_COUNT=3
  #    - AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE=true
  #  volumes:
  #    - cosmosdata:/data
  #  restart: unless-stopped
  #  deploy:
  #    resources:
  #      limits:
  #        cpus: '0.5'
  #        memory: '512M'
  #      reservations:
  #        cpus: '0.1'
  #        memory: '256M'

  mongodb:
    image: mongo
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin_1234
    ports:
      - "27017:27017"
    command: mongod --bind_ip 0.0.0.0
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512M'
        reservations:
          cpus: '0.1'
          memory: '256M'

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin_1234
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin_1234@mongodb:27017/
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512M'
        reservations:
          cpus: '0.1'
          memory: '256M'

  rabbitmq:
    container_name: rabbitmq
    image: masstransit/rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512M'
        reservations:
          cpus: '0.1'
          memory: '256M'
  
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    ports:
      - 9200:9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    networks:
      - promo
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512M'
        reservations:
          cpus: '0.1'
          memory: '256M'

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.13.4
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=http://localhost:9200
      - NODE_OPTIONS=--max-old-space-size=4096
      - XPACK_REPORTING_KIBANASERVER_HOSTNAME=localhost
      - SERVER_SSL_ENABLED=false
      - xpack.security.enabled=true
      - xpack.fleet.agents.tlsCheckDisabled=true
      - xpack.security.authc.providers=[]
    networks:
      - promo
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512M'
        reservations:
          cpus: '0.1'
          memory: '256M'
  
  prometheus:
    image: prom/prometheus:latest
    user: root
    container_name: prometheus
    hostname: prometheus
    volumes:
      - ./prometheus-conf/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 9090:9090
    networks:
      - promo
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512M'
        reservations:
          cpus: '0.1'
          memory: '256M'
   

  grafana:
    image: grafana/grafana
    container_name: grafana
    hostname: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - 3000:3000
    networks:
      - promo
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: '512M'
        reservations:
          cpus: '0.1'
          memory: '256M'
  

volumes:
  prometheus_data: {}
  elasticsearch-data:
  cosmosdata:

networks:
  promo:
    driver: bridge  